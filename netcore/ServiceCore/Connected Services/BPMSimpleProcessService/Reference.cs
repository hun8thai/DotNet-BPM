//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BPMSimpleProcessService
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3-preview3.21351.2")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://xmlns.oracle.com/bpmn/bpmnProcess/SimpleProcess", ConfigurationName="BPMSimpleProcessService.SimpleProcessPortType")]
    public interface SimpleProcessPortType
    {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void startMessage(BPMSimpleProcessService.startMessage request);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="")]
        System.Threading.Tasks.Task startMessageAsync(BPMSimpleProcessService.startMessage request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3-preview3.21351.2")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="startMessage", WrapperNamespace="http://xmlns.oracle.com/bpmn/bpmnProcess/SimpleProcess", IsWrapped=true)]
    public partial class startMessage
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.oracle.com/bpmn/bpmnProcess/SimpleProcess", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string id;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.oracle.com/bpmn/bpmnProcess/SimpleProcess", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string name;
        
        public startMessage()
        {
        }
        
        public startMessage(string id, string name)
        {
            this.id = id;
            this.name = name;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3-preview3.21351.2")]
    public interface SimpleProcessPortTypeChannel : BPMSimpleProcessService.SimpleProcessPortType, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3-preview3.21351.2")]
    public partial class SimpleProcessPortTypeClient : System.ServiceModel.ClientBase<BPMSimpleProcessService.SimpleProcessPortType>, BPMSimpleProcessService.SimpleProcessPortType
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public SimpleProcessPortTypeClient() : 
                base(SimpleProcessPortTypeClient.GetDefaultBinding(), SimpleProcessPortTypeClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.SimpleProcessPort.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SimpleProcessPortTypeClient(EndpointConfiguration endpointConfiguration) : 
                base(SimpleProcessPortTypeClient.GetBindingForEndpoint(endpointConfiguration), SimpleProcessPortTypeClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SimpleProcessPortTypeClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(SimpleProcessPortTypeClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SimpleProcessPortTypeClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(SimpleProcessPortTypeClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SimpleProcessPortTypeClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public void startMessage(BPMSimpleProcessService.startMessage request)
        {
            base.Channel.startMessage(request);
        }
        
        public System.Threading.Tasks.Task startMessageAsync(BPMSimpleProcessService.startMessage request)
        {
            return base.Channel.startMessageAsync(request);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.SimpleProcessPort))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.SimpleProcessPort))
            {
                return new System.ServiceModel.EndpointAddress("http://127.0.0.1:7001/soa-infra/services/default/BpmProject/SimpleProcess.service" +
                        "");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return SimpleProcessPortTypeClient.GetBindingForEndpoint(EndpointConfiguration.SimpleProcessPort);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return SimpleProcessPortTypeClient.GetEndpointAddress(EndpointConfiguration.SimpleProcessPort);
        }
        
        public enum EndpointConfiguration
        {
            
            SimpleProcessPort,
        }
    }
}
